esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

# Enable Home Assistant API
api:
  reboot_timeout: 0s
#  encryption:
#    key: ""
# Required for Home Assistant Intergration

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "IAQ Fallback Hotspot"
    password: "IfnXyerd2ufA"

captive_portal:
logger:
  baud_rate: 0

web_server:
  port: 80

substitutions:
  yaml_version: "1.1.3"

esphome:
  name: iaq-board
  friendly_name: IAQ Board
  # The library dep is added because of a bug in the neopixel library 
  # ver. 2.5.7. Can be removed when library is updated in future ver.
  # of esphome
  platformio_options:
    lib_deps: NeoPixelBus@2.6.0
    
  on_boot:
    then:
      - lambda: 'id(pm2_5).publish_state(1.0);'
      - lambda: 'id(co2).publish_state(400);'
      - light.control:
          id: led1
          brightness: 0.25
          state: on
      - light.control:
          id: led2
          brightness: 0.25
          state: on
      - light.control:
          id: led3
          brightness: 0.25
          state: on
      - delay: 1 min
      - script.execute: min_max_zero_script
        
script:
  - id: min_max_zero_script
    then: 
      - globals.set:
          id: pm_max
          value: '0.0'
      - globals.set:
          id: pm_min
          value: '300.0'
      - globals.set:
          id: co_max
          value: '0.0'
      - globals.set:
          id: co_min
          value: '5000.0'
      - globals.set:
          id: temp_min
          value: '50.0'
      - globals.set:
          id: temp_max
          value: '0.0'
button:
  - platform: template
    name: "Next Screen"
    id: iaq_screen_refresh
    # Optional variables:
    icon: "mdi:screen-rotatio"
    on_press:
      then:
        - lambda: |-
            if (id(button_mode) < 8) { id(button_mode) += 1; }
            else { id(button_mode) = 1; }

  - platform: template
    name: "Led Trigger"
    id: iaq_led_status
    # Optional variables:
    icon: "mdi:led-outline"
    on_press:
      then:
        - lambda: |-
            if (id(led_status)) { id(led_status) = false; }
            else { id(led_status) = true; } 
  
  - platform: template
    name: "Nightmode"
    id: iaq_nightmode
    # Optional variables:
    icon: "mdi:lightbulb-night"
    on_press:
      then:
        - lambda: |-
            if (id(night_mode)) { id(night_mode) = false; }
            else { id(night_mode) = true; }

  - platform: template
    name: "+/- Script"
    id: iaq_min_max_zero_script
    # Optional variables:
    icon: "mdi:refresh"
    on_press:
      then:
        - globals.set:
            id: min_max_zero
            value: 'true'
        - script.execute: min_max_zero_script
        - delay: 3s
        - globals.set:
            id: min_max_zero
            value: 'false'
        - logger.log: MIN/MAX Script enacted
        
globals:
  - id: button_mode
    type: int
    initial_value: '1'
  - id: brightness_correction
    type: float
    restore_value: yes
    initial_value: '0.15'
  - id: version
    type: bool
    initial_value: 'false'
  - id: led_status
    type: bool
    initial_value: 'true'
    restore_value: yes
  - id: display_on
    type: bool
    initial_value: 'true'
  - id: led_status_display
    type: bool
    initial_value: 'false'
  - id: night_mode
    type: bool
    restore_value: yes
  - id: night_mode_display
    type: bool
  - id: pm_min
    type: float
    initial_value: '300.0'
  - id: pm_max
    type: float
    initial_value: '0.0'
  - id: co_min
    type: float
    initial_value: '5000.0'
  - id: co_max
    type: float
    initial_value: '0.0'
  - id: temp_min
    type: float
    initial_value: '50.0'
  - id: temp_max
    type: float
    initial_value: '0.0'
  - id: min_max_zero
    type: bool
    initial_value: 'false'

font:
  - file: "fonts/Arial.ttf"
    id: arial
    size: 15
  - file: "fonts/Arial.ttf"
    id: arial30
    size: 30
  - file: "fonts/Arial.ttf"
    id: arial10
    size: 10

uart:
  - rx_pin: GPIO1
    baud_rate: 9600
    id: pms
  
  - rx_pin: GPIO18
    tx_pin: GPIO19
    baud_rate: 9600
    id: mh

i2c:
  scl: GPIO22
  sda: GPIO21
  frequency: 100kHz

binary_sensor:
  - platform: gpio
    id: buttonpcb
    pin:
      number: GPIO23
      mode: INPUT_PULLUP
      inverted: True
    on_click:
      - min_length: 25ms
        max_length: 500ms
        then:
          - lambda: |-
              if (id(button_mode) < 8) { id(button_mode) += 1; }
              else { id(button_mode) = 1; }
      - min_length: 2s
        max_length: 5s
        then:
          - lambda: |-
              if (id(led_status)) { id(led_status) = false; }
              else { id(led_status) = true; }
          - globals.set:
              id: led_status_display
              value: 'true'
          - delay: 3s
          - globals.set:
              id: led_status_display
              value: 'false'
      - min_length: 5s
        max_length: 10s
        then:
          - globals.set:
              id: night_mode_display
              value: 'true'
          - delay: 3s
          - globals.set:
              id: night_mode_display
              value: 'false'
          - lambda: |-
              if (id(night_mode)) { id(night_mode) = false; }
              else { id(night_mode) = true; }
      - min_length: 10s
        max_length: 15s
        then:
          - globals.set:
              id: min_max_zero
              value: 'true'
          - script.execute: min_max_zero_script
          - delay: 3s
          - globals.set:
              id: min_max_zero
              value: 'false'
      - min_length: 15s
        max_length: 20s
        then:
          - lambda: |-
              if (id(brightness_correction) >= 0.4) { id(brightness_correction) = 0.0; }
              else { id(brightness_correction) += 0.05; }
      - min_length: 20s
        max_length: 30s
        then:
          - globals.set:
              id: version
              value: 'true'
          - delay: 20s
          - globals.set:
              id: version
              value: 'false'
sensor:
    - platform: pmsx003
      type: PMSX003
      uart_id: pms
      pm_1_0:
        name: "PM 1 Concentration"
        id: pm1
      pm_2_5:
        name: "PM 2.5 Concentration"
        id: pm2_5
        on_value:
          - if:
              condition:
                sensor.in_range:
                  id: pm2_5
                  below: 10
              then: 
                - light.control:
                    id: led1
                    red: 0
                    green: 1
                    blue: 0
          - if:
              condition:
                sensor.in_range:
                  id: pm2_5
                  above: 10
                  below: 20
              then: 
                - light.control:
                    id: led1
                    red: 0
                    green: 1
                    blue: 1
          - if:
              condition:
                sensor.in_range:
                  id: pm2_5
                  above: 20
                  below: 30
              then: 
                - light.control:
                    id: led1
                    red: 1
                    green: 1
                    blue: 0
          - if:
              condition:
                sensor.in_range:
                  id: pm2_5
                  above: 30
                  below: 40
              then: 
                - light.control:
                    id: led1
                    red: 1
                    green: 0
                    blue: 1
          - if:
              condition:
                sensor.in_range:
                  id: pm2_5
                  above: 40
              then: 
                - light.control:
                    id: led1
                    red: 1
                    green: 0
                    blue: 0
          - lambda: |-
              if(id(pm2_5).state > id(pm_max)) { id(pm_max) = id(pm2_5).state; }
              if(id(pm2_5).state < id(pm_min)) { id(pm_min) = id(pm2_5).state; }
      pm_10_0:
        name: "PM 10 Concentration"
        id: pm10

    - platform: bme280
      temperature:
        name: "Temperature"
        oversampling: 1x
        id: temp
        filters:
          - offset: -1.5
        on_value:
          - lambda: |-
              if(id(temp).state > id(temp_max)) { id(temp_max) = id(temp).state; }
              if(id(temp).state < id(temp_min)) { id(temp_min) = id(temp).state; }
      pressure:
        name: "Pressure"
        oversampling: 1x
        id: press
      humidity:
        name: "Humidity"
        oversampling: 1x
        id: hum
      address: 0x76
      update_interval: 10s
      
    - platform: mhz19
      co2:
        name: "CO2"
        id: co2
        on_value:
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  below: 700
              then: 
                - light.control:
                    id: led3
                    red: 0
                    green: 1
                    blue: 0
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 700
                  below: 1000
              then: 
                - light.control:
                    id: led3
                    red: 0
                    green: 1
                    blue: 1
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 1000
                  below: 1500
              then: 
                - light.control:
                    id: led3
                    red: 1
                    green: 1
                    blue: 0
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 1500
                  below: 2100
              then: 
                - light.control:
                    id: led3
                    red: 1
                    green: 0
                    blue: 1
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 2100
              then: 
                - light.control:
                    id: led3
                    red: 1
                    green: 0
                    blue: 0
          - lambda: |-
              if(id(co2).state > id(co_max)) { id(co_max) = id(co2).state; }
              if(id(co2).state < id(co_min)) { id(co_min) = id(co2).state; }

      temperature:
        name: "MH-Z19 Temperature"
      update_interval: 10s
      automatic_baseline_calibration: false
      uart_id: mh
      id: mh_sensor
      
    - platform: tsl2561
      name: "Ambient Light"
      update_interval: 3s
      id: light_sens
      on_value:
        then:
          - light.control:
              id: led1
              brightness: !include includes/brightness.yaml
          - light.control:
              id: led2
              brightness: !include includes/brightness.yaml
          - light.control:
              id: led3
              brightness: !include includes/brightness.yaml
          - lambda: |-
              if (id(light_sens).state < 2 && !id(night_mode)) { id(display_on) = false; }
              else { id(display_on) = true; }
      
    - platform: sgp30
      eco2:
        name: "eCO2"
        accuracy_decimals: 1
        id: eco2
      tvoc:
        name: "TVOC"
        accuracy_decimals: 1
        id: tvoc
      update_interval: 1s
      # https://esphome.io/components/sensor/sgp30.html#calibrating-baseline
      # baseline:
      #   eco2_baseline: 0x92B7
      #   tvoc_baseline: 0x935A
      compensation:
         temperature_source: temp
         humidity_source: hum
      
    - platform: uptime
      name: Uptime
      id: utime_sensor
      
    - platform: template
      name: "PM2.5 24h average"
      id: pm2_5_avg
      icon: mdi:chemical-weapon
      unit_of_measurement: µg/m³
      lambda: |-
        return id(pm2_5).state;
      update_interval: 60s
      filters:
        - sliding_window_moving_average:
            window_size: 1440
            send_every: 1
      on_value:
        - if:
            condition:
              sensor.in_range:
                id: pm2_5_avg
                below: 10
            then: 
              - light.control:
                  id: led2
                  red: 0
                  green: 1
                  blue: 0
              - text_sensor.template.publish:
                  id: aqi
                  state: "Good"
        - if:
            condition:
              sensor.in_range:
                id: pm2_5_avg
                above: 10
                below: 20
            then: 
              - light.control:
                  id: led2
                  red: 0
                  green: 1
                  blue: 1
              - text_sensor.template.publish:
                  id: aqi
                  state: "Fair"
        - if:
            condition:
              sensor.in_range:
                id: pm2_5_avg
                above: 20
                below: 25
            then: 
              - light.control:
                  id: led2
                  red: 1
                  green: 1
                  blue: 0
              - text_sensor.template.publish:
                  id: aqi
                  state: "Moderate"                  
        - if:
            condition:
              sensor.in_range:
                id: pm2_5_avg
                above: 25
                below: 50
            then: 
              - light.control:
                  id: led2
                  red: 1
                  green: 0
                  blue: 1
              - text_sensor.template.publish:
                  id: aqi
                  state: "Poor"                  
        - if:
            condition:
              sensor.in_range:
                id: pm2_5_avg
                above: 50
                below: 75
            then: 
              - light.control:
                  id: led2
                  red: 1
                  green: 0
                  blue: 0
              - text_sensor.template.publish:
                  id: aqi
                  state: "Very Poor"                  
        - if:
            condition:
              sensor.in_range:
                id: pm2_5_avg
                above: 75
            then: 
              - light.control:
                  id: led2
                  red: 1
                  green: 0
                  blue: 0
              - text_sensor.template.publish:
                  id: aqi
                  state: "Extremely Poor"                      

# This is a "helper" template sensor which is doing 30 sec moving average of PM2.5
# I use it for sensing in automations controlling purifiers (with Home Assistant), 
# in order to remove the outlier values and making the control more smooth
    - platform: template
      name: "PM2.5 median"
      id: pm2_5_median
      icon: mdi:chemical-weapon
      unit_of_measurement: µg/m³
      lambda: |-
        return id(pm2_5).state;
      update_interval: 1s
      filters:
        - median:
            window_size: 30
            send_every: 30
            send_first_at: 15

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ip
    ssid:
      name: Connected SSID
      id: ssid
      
  - platform: template
    name: "Air Quality Index (AQI)"
    id: aqi
    icon: mdi:air-filter
      
light:
  - platform: partition
    name: led1
    id: led1
    default_transition_length: 0s
    segments:
      - id: rgb_led
        from: 0
        to: 0
  - platform: partition
    name: led2
    id: led2
    default_transition_length: 0s
    segments:
    - id: rgb_led
      from: 1
      to: 1
  - platform: partition
    name: led3
    id: led3
    default_transition_length: 0s
    segments:
    - id: rgb_led
      from: 2
      to: 2
  - platform: neopixelbus
    num_leds: 3
    pin: GPIO16
    name: "RGB strip"
    variant: SK6812
    id: rgb_led
    default_transition_length: 0s

switch:
  - platform: gpio
    name: "PMS7003_SET"
    pin: 
      number: GPIO26
      mode: OUTPUT
    restore_mode: ALWAYS_ON
    id: pms_set
    
  - platform: template
    name: "CO2 Sensor Zero Calibration"
    turn_on_action:
      - mhz19.calibrate_zero: mh_sensor
      - switch.turn_off: co2_cal
    id: co2_cal
    
  - platform: template
    name: "Brightness Correction"
    turn_on_action:
      - lambda: |-
          if (id(brightness_correction) >= 0.4) { id(brightness_correction) = 0.0; }
          else { id(brightness_correction) += 0.05; }
      - switch.turn_off: brightness_cal_template
    id: brightness_cal_template

# The bellow interval can be used if you want to turn on PMS dust sensor
# for 10s each 1min. Can help for longetivity of the sensor, but I do not
# use it. Sensors are cheap to replace if they fail.

# interval:
#   - interval: 60s
#     then:
#       - switch.turn_on: pms_set
#       - delay: 10s
#       - switch.turn_off: pms_set

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    brightness: 100%
    rotation: 180
    id: display1
    lambda: |-
      if (id(button_mode) == 7 && !id(version) && !id(led_status_display) && !id(night_mode_display) && !id(min_max_zero) && id(display_on)) {
        it.printf(0, 0, id(arial), "T: %.1f", id(temp_min));
        it.printf(0, 20, id(arial), "P2: %.0f", id(pm_min));
        it.printf(0, 40, id(arial), "C: %.0f", id(co_min));
        it.printf(70, 0, id(arial), "T: %.1f", id(temp_max));
        it.printf(70, 20, id(arial), "P2: %.0f", id(pm_max));
        it.printf(70, 40, id(arial), "C: %.0f", id(co_max));
        it.line(58, 0, 58, 64);
      } else if (id(button_mode) == 6 && !id(version) && !id(led_status_display) && !id(night_mode_display) && !id(min_max_zero) && id(display_on)) {
        it.printf(0, 0, id(arial), "P1: %.0f", id(pm1).state);
        it.printf(0, 20, id(arial), "P2: %.0f", id(pm2_5).state);
        it.printf(0, 40, id(arial), "P10: %.0f", id(pm10).state);
        it.printf(70, 0, id(arial), "T: %.1f", id(temp).state);
        it.printf(70, 20, id(arial), "H: %.0f", id(hum).state);
        it.printf(70, 40, id(arial), "C: %.0f", id(co2).state);
        it.line(65, 0, 65, 64);
      } else if (id(button_mode) == 1 && !id(version) && !id(led_status_display) && !id(night_mode_display) && !id(min_max_zero) && id(display_on)) {
          it.print(0, 10, id(arial), "PM2.5:   ");
          it.printf(50, 0, id(arial30), "%.0f", id(pm2_5).state);
          it.print(0, 37, id(arial), "CO2:   ");
          it.printf(50, 30, id(arial30), "%.0f", id(co2).state);
      } else if  (id(button_mode) == 5 && !id(version) && !id(led_status_display) && !id(night_mode_display) && !id(min_max_zero) && id(display_on)) {
          it.printf(0, 0, id(arial), "Light: %.0f lux", id(light_sens).state);
          it.printf(0, 20, id(arial), "TVOC: %.0f ppb", id(tvoc).state);
          it.printf(0, 40, id(arial), "eCO2: %.0f ppm", id(eco2).state);
      } else if (id(button_mode) == 4 && !id(version) && !id(led_status_display) && !id(night_mode_display) && !id(min_max_zero) && id(display_on)) {
          it.printf(0, 0, id(arial), "PM1: %.0f ugm3", id(pm1).state);
          it.printf(0, 20, id(arial), "P2.5: %.0f ugm3", id(pm2_5).state);
          it.printf(0, 40, id(arial), "PM10: %.0f ugm3", id(pm10).state);
      } else if (id(button_mode) == 3 && !id(version) && !id(led_status_display) && !id(night_mode_display) && !id(min_max_zero) && id(display_on)) {
          it.printf(0, 0, id(arial), "Temp: %.1f °C", id(temp).state);
          it.printf(0, 20, id(arial), "Humidity: %.0f %%", id(hum).state);
          it.printf(0, 40, id(arial), "Pressure: %.0f hPa", id(press).state);
      } else if (id(button_mode) == 2 && !id(version) && !id(led_status_display) && !id(night_mode_display) && !id(min_max_zero) && id(display_on)) {
          it.print(2, 0, id(arial), " Air Quality Index");
          it.line(0, 18, 128, 18);
          std::string aqi_ = id(aqi).state;
          it.printf(30, 25, id(arial), "%s", aqi_.c_str());
          it.printf(30, 45, id(arial), "%.0f ugm3", id(pm2_5_avg).state);
      } else if (id(version)) {
          it.print(0, 0, id(arial10), "YAML ver: $yaml_version");
          it.line(0, 12, 128, 12);
          it.printf(0, 15, id(arial10), "ESPHome ver: %s", ESPHOME_VERSION);
          std::string ip_ = id(ip).state;
          it.printf(0, 25, id(arial10), "IP: %s", ip_.c_str());
          std::string ssid_ = id(ssid).state;
          it.printf(0, 35, id(arial10), "Connected to: %s", ssid_.c_str());
          it.printf(0, 45, id(arial10), "LED brightness: +%.0f %%", id(brightness_correction)*100);
      } else if (id(led_status_display)) {
          it.printf(0, 20, id(arial), "LEDs status: %s", id(led_status) ? "ON" : "OFF");
      } else if (id(night_mode_display)) {
          it.printf(0, 20, id(arial), "Night dim: %s", id(night_mode) ? "ON" : "OFF");
      } else if (id(min_max_zero)) {
          it.print(0, 20, id(arial), "MIN-MAX reset!");
      }
      
  - platform: ssd1306_i2c
    model: "SSD1306 64x48"
    address: 0x3D
    brightness: 100%
    rotation: 270
    id: display2
    lambda: |-
      if (id(display_on) && id(button_mode) < 8) {
          it.printf(0, 0, id(arial), "%.1f C", id(temp).state);
          it.printf(0, 20, id(arial), "%.0f %%", id(hum).state);
          it.printf(0, 40, id(arial), "%.0f h", id(press).state);
      }
